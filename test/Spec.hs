import Test.Hspec
import Problem

import Data.Maybe

main :: IO ()
main = hspec $ do
  describe "p1" $ it "" $
    p1 10 `shouldBe` 23
  describe "problem1" $ it "" $
    problem1 `shouldBe` 233168
  describe "fib" $ it "" $
    map fib [0..9] `shouldBe` [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  describe "problem2" $ it "" $
    problem2 `shouldBe` 4613732
  describe "listPrimeFactor" $ it "" $
    listPrimeFactor 13195 [] `shouldBe` [5, 7, 13, 29]
  describe "problem3" $ it "" $
    problem3 `shouldBe` 6857
  describe "palindrome" $ it "" $ do
    palindrome (show 101) `shouldBe` True
    palindrome (show 1001) `shouldBe` True
  describe "problem4" $ it "" $
    head problem4 `shouldBe` 906609
  describe "problem5" $ it "" $
    problem5 10 `shouldBe` 2520
  describe "problem6" $ it "" $
    problem6 10 `shouldBe` 3025 - 385
  describe "isPrime" $ it "" $
    map isPrime [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] `shouldBe` map (\n -> True) [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
  describe "problem7" $ do
    it "premise" $ problem7 6 `shouldBe` 13
    --it "answer" $ problem7 10001 `shouldBe` 104743
  describe "stringToListInt" $
    it "" $ stringToListInt "012345" `shouldBe` [0..5]
  describe "listSeries" $ do
    it "" $ listSeries [] 2 [0..3] `shouldBe` [[0, 1], [1, 2], [2, 3]]
    it "" $ listSeries [] 3 [0..3] `shouldBe` [[0, 1, 2], [1, 2, 3]]
    it "" $ listSeries [] 4 [0..3] `shouldBe` [[0, 1, 2, 3]]
  describe "problem8" $ do
    let x =  "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
    it "premise" $ problem8 x 4 `shouldBe` 5832
    it "problem" $ problem8 x 13 `shouldBe` 23514624000
  describe "problem10" $ do
    it "" $ problem10 10 `shouldBe` 17
--    it "" $ problem10 2000000 `shouldBe` 142913828922

